if (!self.define) { let e; const i = {}; const s = (s, n) => (s = new URL(`${s}.js`, n).href, i[s] || new Promise(((i) => { if ('document' in self) { const e = document.createElement('script'); e.src = s, e.onload = i, document.head.appendChild(e); } else e = s, importScripts(s), i(); })).then((() => { const e = i[s]; if (!e) throw new Error(`Module ${s} didnâ€™t register its module`); return e; }))); self.define = (n, r) => { const t = e || ('document' in self ? document.currentScript.src : '') || location.href; if (i[t]) return; const c = {}; const o = (e) => s(e, t); const d = { module: { uri: t }, exports: c, require: o }; i[t] = Promise.all(n.map(((e) => d[e] || o(e)))).then(((e) => (r(...e), c))); }; }define(['./workbox-ec81a2a1'], ((e) => {
  self.addEventListener('message', ((e) => { e.data && e.data.type === 'SKIP_WAITING' && self.skipWaiting(); })), e.precacheAndRoute([{ url: 'index.html', revision: '97b123bac92fa6632f59cf152d0df8fe' }, { url: 'main.css', revision: '3362dbfc240b35e28bc7cbc39dec2325' }, { url: 'main.js', revision: '3050288d0ea8c3a331b8dac407106087' }, { url: 'main.js.LICENSE.txt', revision: 'fd1bc61fc6db7c103abb62a6e78a2afd' }], {});
}));
